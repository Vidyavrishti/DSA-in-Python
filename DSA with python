{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3364d718-29f0-45de-a23e-43f8bc1aa284",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[1,2,3,4,5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3dbcf2ca-7e69-4aae-8220-cd1064f4fba8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.pop()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b08c5789-edbb-4a52-a697-121285bb9ca6",
   "metadata": {},
   "source": [
    "stack implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7d4e3bc8-f39c-478e-ac95-25223325c1f2",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2206061706.py, line 16)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[11], line 16\u001b[1;36m\u001b[0m\n\u001b[1;33m    return len(self.stack)=0\u001b[0m\n\u001b[1;37m                          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "class stack:\n",
    "    def __init__(self):\n",
    "        self.stack=[]\n",
    "    def push(self,items):\n",
    "        self.stack.append(items)\n",
    "    def pop(self):\n",
    "         if len(self.stack)!=0:\n",
    "             return self.stack.pop()\n",
    "         else:                                                                                                                                                                         'stack is empty'\n",
    "    def peek(self):\n",
    "        if len(self.stack)!=0:\n",
    "            return selfstack[-1]\n",
    "        else:\n",
    "            'stack is empty'\n",
    "        def isempty(self):\n",
    "            return len(self.stack)=0\n",
    "        def size(self)\n",
    "            return len(self.stack)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "39930de7-ac0f-4c67-8568-29aef3f36faf",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = stack()\n",
    "s.push(44)\n",
    "s.push(45)\n",
    "s.push(46)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dead9818-0e37-4d9b-887a-61604363e7a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s.pop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "493e1de1-9227-4e6a-825d-fabb2987f6f1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "326b4800-eb37-4ff8-8cdd-0511cb60500c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
